Patches applied:
	newterm (https://st.suckless.org/patches/newterm/)
	w3m (https://st.suckless.org/patches/w3m/)
	scrollback (https://st.suckless.org/patches/scrollback/)
	desktopentry (https://st.suckless.org/patches/desktopentry/)

Diff of my changes:

diff --git a/exception.h b/exception.h
new file mode 100644
index 0000000..ff27c46
--- /dev/null
+++ b/exception.h
@@ -0,0 +1,44 @@
+#ifndef EXCEPTION_H_RAWU1HQL
+#define EXCEPTION_H_RAWU1HQL
+
+#include <setjmp.h>
+#include <stdio.h>
+#include <stdlib.h>
+
+#ifndef __JMP_STACK_MAX_DEPTH
+#define __JMP_STACK_MAX_DEPTH 8
+#endif
+
+static __thread struct {
+	jmp_buf buf[__JMP_STACK_MAX_DEPTH];
+	int depth;
+} __local_jmp_stack = {
+	.depth = 0
+};
+
+#define _TRY 									\
+	do { 										\
+		__local_jmp_stack.depth++; 						\
+		if(__local_jmp_stack.depth > __JMP_STACK_MAX_DEPTH) { 			\
+			fprintf(stderr, "CURRENT TRY-CATCH DEPTH EXCEEDS MAXIMUM" 	\
+					" ALLOWED DEPTH (%d)\n", __JMP_STACK_MAX_DEPTH);\
+			abort(); 						\
+		} 									\
+		int __jmp_status = setjmp(__local_jmp_stack.buf[__local_jmp_stack.depth - 1]); 	\
+		if(__jmp_status == 0)
+#define _CATCH else
+#define _TRYEND __local_jmp_stack.depth--; } while(0)
+
+#define _TRY_STATUS_CODE __jmp_status
+
+#define _THROW(_STATUS_CODE) do { 						\
+	if(__local_jmp_stack.depth == 0) { 					\
+		fprintf(stderr, "UNHANDLED EXCEPTION\n"); 			\
+		abort(); 							\
+	} else { 								\
+		longjmp(__local_jmp_stack.buf[__local_jmp_stack.depth - 1], 	\
+				_STATUS_CODE); 					\
+	} 									\
+} while(0)
+
+#endif /* end of include guard: EXCEPTION_H_RAWU1HQL */
diff --git a/st.c b/st.c
index a9338e1..839c86f 100644
--- a/st.c
+++ b/st.c
@@ -1716,6 +1826,9 @@ csihandle(void)
 		case 2: /* all */
 			tclearregion(0, 0, term.col-1, term.row-1);
 			break;
+		case 3: /* scrollback buffer */
+			kclearhist();
+			break;
 		default:
 			goto unknown;
 		}
diff --git a/st.info b/st.info
index 8201ad6..25c3e68 100644
--- a/st.info
+++ b/st.info
@@ -184,6 +184,7 @@ st-mono| simpleterm monocolor,
 # XTerm extensions
 	rmxx=\E[29m,
 	smxx=\E[9m,
+	E3=\E[3J,
 # disabled rep for now: causes some issues with older ncurses versions.
 #	rep=%p1%c\E[%p2%{1}%-%db,
 # tmux extensions, see TERMINFO EXTENSIONS in tmux(1)
diff --git a/x.c b/x.c
index 89786b8..7acdbd5 100644
--- a/x.c
+++ b/x.c
@@ -19,6 +19,7 @@ char *argv0;
 #include "arg.h"
 #include "st.h"
 #include "win.h"
+#include "exception.h"
 
 /* types used in config.h */
 typedef struct {
@@ -1669,6 +1654,19 @@ xximspot(int x, int y)
 	XSetICValues(xw.ime.xic, XNPreeditAttributes, xw.ime.spotlist, NULL);
 }
 
+int xerror_handler(Display *dpy, XErrorEvent *e) {
+	char buf[512];
+
+	XGetErrorText(dpy, e->error_code, buf, sizeof(buf));
+	fprintf(stderr, "%s\n", buf);
+	fprintf(stderr, "\tMajor op-code of failed request: %d\n", e->request_code);
+	fprintf(stderr, "\tMinor op-code of failed request: %d\n", e->minor_code);
+
+	_THROW(1);
+
+	return 0;
+}
+
 void
 expose(XEvent *ev)
 {
@@ -1908,13 +1906,20 @@ run(void)
 	ttyfd = ttynew(opt_line, shell, opt_io, opt_cmd);
 	cresize(w, h);
 
+	XSetErrorHandler(xerror_handler);
+
 	for (timeout = -1, drawing = 0, lastblink = (struct timespec){0};;) {
 		FD_ZERO(&rfd);
 		FD_SET(ttyfd, &rfd);
 		FD_SET(xfd, &rfd);
 
-		if (XPending(xw.dpy))
-			timeout = 0;  /* existing events might not set xfd */
+		_TRY {
+			if (XPending(xw.dpy))
+				timeout = 0;  /* existing events might not set xfd */
+		} _CATCH {
+			fprintf(stderr, "%s: ATTEMPTING TO RECOVER FROM AN X SERVER ERROR...\n",
+					termname);
+		} _TRYEND;
 
 		seltv.tv_sec = timeout / 1E3;
 		seltv.tv_nsec = 1E6 * (timeout - 1E3 * seltv.tv_sec);
@@ -1931,14 +1936,19 @@ run(void)
 			ttyread();
 
 		xev = 0;
-		while (XPending(xw.dpy)) {
-			xev = 1;
-			XNextEvent(xw.dpy, &ev);
-			if (XFilterEvent(&ev, None))
-				continue;
-			if (handler[ev.type])
-				(handler[ev.type])(&ev);
-		}
+		_TRY {
+			while (XPending(xw.dpy)) {
+				xev = 1;
+				XNextEvent(xw.dpy, &ev);
+				if (XFilterEvent(&ev, None))
+					continue;
+				if (handler[ev.type])
+					(handler[ev.type])(&ev);
+			}
+		} _CATCH {
+			fprintf(stderr, "%s: ATTEMPTING TO RECOVER FROM AN X SERVER ERROR...\n",
+					termname);
+		} _TRYEND;
 
 		/*
 		 * To reduce flicker and tearing, when new content or event

